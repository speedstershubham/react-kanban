{"version":3,"sources":["ControlledBoard.js","cards.js","column.js","App.js","index.js"],"names":["ControlledBoard","useState","controlledBoard","setBoard","getData","a","axios","get","response","data","columns","cards","columnData","map","column","filter","card","columnid","_id","console","log","useEffect","onCardDragEnd","_card","source","destination","updatedBoard","moveCard","disableColumnDrag","Cards","title","description","error","success","values","setValues","handleChange","name","event","target","value","onSubmit","user","preventDefault","fetch","method","headers","Accept","body","JSON","stringify","then","json","catch","err","className","style","display","onChange","type","onClick","Column","ColumnForm","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.2b9bfc26.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport Board, { moveCard } from \"@lourenci/react-kanban\";\r\nimport axios from 'axios'\r\nimport \"@lourenci/react-kanban/dist/styles.css\";\r\n\r\n\r\n\r\n  const ControlledBoard = () => {\r\n  \r\n    const [controlledBoard, setBoard] = useState();\r\n\r\n    const getData= async() =>{\r\ntry {\r\n  const response = await axios.get(\"https://react-kanban-server.herokuapp.com/\")\r\n//  console.log(response.data)\r\n\r\nconst {columns,cards} = ({...response.data})\r\n\r\nconst columnData = columns.map(column => {\r\n  return ({ ...column,cards:cards.filter(card => card.columnid === column._id)})\r\n})\r\nsetBoard({columns:columnData})\r\n} catch (error) {\r\n  console.log(error)\r\n}\r\n    }\r\n\r\n    useEffect(() => {\r\n    getData()\r\n    },[])\r\n    \r\n    const handleCardMove = (_card,source, destination ) => {\r\n      console.log( \"111111\", {_card,source, destination })\r\n      console.log({controlledBoard})\r\n      const updatedBoard = moveCard(controlledBoard, source, destination);\r\n      setBoard(updatedBoard);\r\n    }\r\n    \r\n\r\n  console.log({controlledBoard})\r\n\r\n  if(!controlledBoard){\r\n    return (\r\n      <div> \r\n         </div>\r\n    )\r\n  }\r\n    return (\r\n      <Board onCardDragEnd={handleCardMove} disableColumnDrag>\r\n        {controlledBoard}\r\n      </Board>\r\n    );\r\n  }\r\n\r\n  export default ControlledBoard","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst Cards = () => {\r\n  const [values, setValues] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    error: \"\",\r\n    success: false\r\n  });\r\n\r\n  const createcard = user =>{\r\n    return fetch(`https://react-kanban-server.herokuapp.com/card/new`, {\r\n        method:\"POST\",\r\n        headers :{\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(user)\r\n    })\r\n    .then(response => {\r\n        return response.json();\r\n    })\r\n    .catch(err => console.log(err));\r\n};\r\n\r\n  const { title, description, error, success } = values;\r\n\r\n  const handleChange = name => event => {\r\n    setValues({ ...values, error: false, [name]: event.target.value });\r\n  };\r\n\r\n  const onSubmit = event => {\r\n    event.preventDefault();\r\n    setValues({ ...values, error: false });\r\n    createcard({ title,description})\r\n      .then(data => {\r\n        if (data.error) {\r\n          setValues({ ...values, error: data.error, success: false });\r\n        } else {\r\n          setValues({\r\n            ...values,\r\n            title:\"\",\r\n            description:\"\",\r\n            error: \"\",\r\n            success: true\r\n          });\r\n        }\r\n      })\r\n      .catch(console.log(\"Error in Cards\"));\r\n  };\r\n\r\n  const CardForm = () => {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 offset-sm-3 text-left\">\r\n          <form>\r\n            <div className=\"form-group\">\r\n            <p>Create Card</p>\r\n              <label className=\"text-light\">title</label>\r\n              <input\r\n                className=\"form-control\"\r\n                onChange={handleChange(\"title\")}\r\n                type=\"text\"\r\n                value={title}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"text-light\">Description</label>\r\n              <input\r\n                className=\"form-control\"\r\n                onChange={handleChange(\"description\")}\r\n                type=\"description\"\r\n                value={description}\r\n              />\r\n            </div>\r\n\r\n            <button onClick={onSubmit} className=\"btn btn-success btn-block\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const successMessage = () => {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 offset-sm-3 text-left\">\r\n          <div\r\n            className=\"alert alert-success\"\r\n            style={{ display: success ? \"\" : \"none\" }}\r\n          >\r\n            New Card was created successfully. Please{\" \"}\r\n           \r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const errorMessage = () => {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 offset-sm-3 text-left\">\r\n          <div\r\n            className=\"alert alert-danger\"\r\n            style={{ display: error ? \"\" : \"none\" }}\r\n          >\r\n            {error}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n   <div>\r\n      {successMessage()}\r\n      {errorMessage()}\r\n      {CardForm()}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst Column = () => {\r\n  const [values, setValues] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    error: \"\",\r\n    success: false\r\n  });\r\n\r\n  const createcolumn = user =>{\r\n    return fetch(`https://react-kanban-server.herokuapp.com/new/`, {\r\n        method:\"POST\",\r\n        headers :{\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(user)\r\n    })\r\n    .then(response => {\r\n        return response.json();\r\n    })\r\n    .catch(err => console.log(err));\r\n};\r\n\r\n  const { title, description, error, success } = values;\r\n\r\n  const handleChange = name => event => {\r\n    setValues({ ...values, error: false, [name]: event.target.value });\r\n  };\r\n\r\n  const onSubmit = event => {\r\n    event.preventDefault();\r\n    setValues({ ...values, error: false });\r\n    createcolumn({ title,description})\r\n      .then(data => {\r\n        if (data.error) {\r\n          setValues({ ...values, error: data.error, success: false });\r\n        } else {\r\n          setValues({\r\n            ...values,\r\n            title:\"\",\r\n            error: \"\",\r\n            success: true\r\n          });\r\n        }\r\n      })\r\n      .catch(console.log(\"Error in Column\"));\r\n  };\r\n\r\n  const ColumnForm = () => {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 offset-sm-3 text-left\">\r\n          <form>\r\n            <div className=\"form-group\">\r\n                <p>Create Column</p>\r\n              <label className=\"text-light\">title</label>\r\n              <input\r\n                className=\"form-control\"\r\n                onChange={handleChange(\"title\")}\r\n                type=\"text\"\r\n                value={title}\r\n              />\r\n            </div>\r\n\r\n            <button onClick={onSubmit} className=\"btn btn-success btn-block\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const successMessage = () => {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 offset-sm-3 text-left\">\r\n          <div\r\n            className=\"alert alert-success\"\r\n            style={{ display: success ? \"\" : \"none\" }}\r\n          >\r\n            New Column was created successfully. Please{\" \"}\r\n           \r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const errorMessage = () => {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 offset-sm-3 text-left\">\r\n          <div\r\n            className=\"alert alert-danger\"\r\n            style={{ display: error ? \"\" : \"none\" }}\r\n          >\r\n            {error}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n   <div>\r\n      {successMessage()}\r\n      {errorMessage()}\r\n      {ColumnForm()}\r\n    \r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n\r\n // <p className=\"text-white text-center\">{JSON.stringify(values)}</p>import React, { useState } from \"react\";\r\n","import React from \"react\";\nimport ControlledBoard from \"./ControlledBoard\";\nimport Card from \"./cards\";\nimport Column from \"./column\";\nimport \"@lourenci/react-kanban/dist/styles.css\";\n\n const App = () => { \n \n    return (\n      <div>\n        <ControlledBoard />\n    <Card />\n    <Column />\n      </div>\n         \n    )\n  }\n\n\nexport default App\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\nconst rootElement = document.getElementById('root');\nReactDOM.render( <App />, rootElement );\n\n"],"sourceRoot":""}